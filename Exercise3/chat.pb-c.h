/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: chat.proto */

#ifndef PROTOBUF_C_chat_2eproto__INCLUDED
#define PROTOBUF_C_chat_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _TextMessage TextMessage;
typedef struct _Empty Empty;


/* --- enums --- */


/* --- messages --- */

struct  _TextMessage
{
  ProtobufCMessage base;
  char *text;
};
#define TEXT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&text_message__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _Empty
{
  ProtobufCMessage base;
};
#define EMPTY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&empty__descriptor) \
     }


/* TextMessage methods */
void   text_message__init
                     (TextMessage         *message);
size_t text_message__get_packed_size
                     (const TextMessage   *message);
size_t text_message__pack
                     (const TextMessage   *message,
                      uint8_t             *out);
size_t text_message__pack_to_buffer
                     (const TextMessage   *message,
                      ProtobufCBuffer     *buffer);
TextMessage *
       text_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   text_message__free_unpacked
                     (TextMessage *message,
                      ProtobufCAllocator *allocator);
/* Empty methods */
void   empty__init
                     (Empty         *message);
size_t empty__get_packed_size
                     (const Empty   *message);
size_t empty__pack
                     (const Empty   *message,
                      uint8_t             *out);
size_t empty__pack_to_buffer
                     (const Empty   *message,
                      ProtobufCBuffer     *buffer);
Empty *
       empty__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   empty__free_unpacked
                     (Empty *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TextMessage_Closure)
                 (const TextMessage *message,
                  void *closure_data);
typedef void (*Empty_Closure)
                 (const Empty *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Chat_Service Chat_Service;
struct _Chat_Service
{
  ProtobufCService base;
  void (*write)(Chat_Service *service,
                const TextMessage *input,
                Empty_Closure closure,
                void *closure_data);
  void (*get_char)(Chat_Service *service,
                   const Empty *input,
                   TextMessage_Closure closure,
                   void *closure_data);
};
typedef void (*Chat_ServiceDestroy)(Chat_Service *);
void chat__init (Chat_Service *service,
                 Chat_ServiceDestroy destroy);
#define CHAT__BASE_INIT \
    { &chat__descriptor, protobuf_c_service_invoke_internal, NULL }
#define CHAT__INIT(function_prefix__) \
    { CHAT__BASE_INIT,\
      function_prefix__ ## write,\
      function_prefix__ ## get_char  }
void chat__write(ProtobufCService *service,
                 const TextMessage *input,
                 Empty_Closure closure,
                 void *closure_data);
void chat__get_char(ProtobufCService *service,
                    const Empty *input,
                    TextMessage_Closure closure,
                    void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor text_message__descriptor;
extern const ProtobufCMessageDescriptor empty__descriptor;
extern const ProtobufCServiceDescriptor chat__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_chat_2eproto__INCLUDED */
